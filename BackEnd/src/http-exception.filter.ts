import {
    ArgumentsHost,
    Catch,
    ExceptionFilter,
    HttpException,
} from '@nestjs/common';
import { Response } from 'express';

@Catch(HttpException)
export class HttpExceptionFilter implements ExceptionFilter {
    catch(exception: HttpException, host: ArgumentsHost) {
        const ctx = host.switchToHttp();
        const response = ctx.getResponse<Response>();
        const status = exception.getStatus();

        const data = exception.getResponse();
        response.status(status).json({
            code: status,
            // We use `message` entry to distinguish
            // whether the content is created by `createBody` method,
            // or generated by ourselves.
            //
            // See https://github.com/nestjs/nest/blob/d9d628d112ff992c8075bae44b826300fd5ca6c8/packages/common/exceptions/http.exception.ts
            // for more details.
            //
            // We accept the following kinds of exception message
            // 1. `string`, which is parsed by `createBody` with `message` entry
            // 2. other message generated by `createBody` whih `message` entry (`array` or default message)
            // 3. self-generated message (`object`) without `message` entry.
            //
            // The type is clear, so...
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            data:
                typeof data === 'object' &&
                (data as Record<string, any>).message
                    ? (data as Record<string, any>).message
                    : data,
        });
    }
}
